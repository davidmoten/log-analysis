PARSER_BEGIN(LogParser)

package org.moten.david.log.gen;

import java.io.StringReader;
import java.io.Reader;

public class LogParser {

/**  
  A String based constructor for ease of use.
  **/
    public LogParser(String s) 
    {
        this((Reader)(new StringReader(s))); 
        
    }
       
    public static void main(String args[]) throws Exception
    {
              String query = args[0];
              LogParser parser = new LogParser(query);
              parser.getNextToken();
    }
}
PARSER_END(LogParser)

/** Skip these characters, they are considered "white space" **/
SKIP :                              
{
    " "
    | "\t"
    | "\r"
    | "\n"

}

TOKEN: /*RESERVED TOKENS FOR UQL */
{
      <LPAREN: "(">
   |  <RPAREN: ")">
   |  <EQUALS: "=">
   |  <LBRACKET: "[">
   |  <RBRACKET: "]">
 }


TOKEN : 
{
<STRING : (["A"-"Z", "0"-"9"])+ >
| <QUOTED_STRING: "\"" (~["\""])+ "\"" >
}


/***
<message> ::= <assigned-expression> { <delimiter> <assigned-expression> }
<delimiter> ::= '|'
<identifier> ::= ( <letter> | <underscore> ) { <digit> | <letter> | <underscore> }
<letter> ::= 'a'..'z'|'A'..'Z'
<underscore> ::= '_'
<digit> ::= '0'..'9'
<word> ::= [ <word-character> ] { <word-character> }
<word-character> ::= <letter> | <underscore> | <digit> 
<expression> ::= <assigned-expression> | <unassigned-expression> 
<assigned-expression> ::= <variable> '=' <unassigned-expression>
<variable> ::= <identifier>
<unassigned-expression> ::= <simple-unassigned-expression> | <complex-unassigned-expression>
<simple-unassigned-expression> ::= <word>
<complex-unassigned-expression> ::= <expression-type> <list-open> { <expression> } <list-close>
<expression-type> ::= <word>
<list-open>  ::= '{' | '['
<list-close> ::= '}' | ']'
**/